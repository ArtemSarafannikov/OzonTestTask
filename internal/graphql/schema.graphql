type Post {
    id: ID!
    author: User!
    title: String!
    content: String!
    allowComments: Boolean!
    editedAt: Timestamp
    createdAt: Timestamp!
    comments(limit: Int = 3, offset: Int = 0): [Comment!]!
}

type Comment {
    id: ID!
    post: Post!
    parentComment: Comment
    author: User!
    text: String!
    createdAt: Timestamp!
    replies(limit: Int = 3, offset: Int = 0): [Comment!]!
}

type User {
    id: ID!
    username: String!
    lastActivity: Timestamp!
    createdAt: Timestamp!
}

type AuthPayload {
    token: String!
    user: User!
}

type Query {
    posts(authorID: ID, limit: Int = 10, offset: Int = 0): [Post!]!
    post(postID: ID!): Post
    comments(postID: ID!, authorID: ID, limit: Int = 10, offset: Int = 0): [Comment!]!
    comment(commentID: ID!): Comment
}

input CreatePostInput {
    title: String!
    content: String!
    allowComments: Boolean = true
}

input CreateCommentInput {
    text: String!
    postID: ID!
    parentCommentID: ID
}

input EditPostInput {
    postID: ID!
    title: String
    content: String
    allowComments: Boolean
}

type Mutation {
    createPost(post: CreatePostInput!): Post! @isAuthenticated
    editPost(newPost: EditPostInput!): Post! @isAuthenticated

    createComment(comment: CreateCommentInput! @length(max: 2000)): Comment! @isAuthenticated

    register(login: String!, password: String!): AuthPayload!
    login(login: String!, password: String!): AuthPayload!
}

scalar Timestamp

directive @length(max: Int!) on ARGUMENT_DEFINITION
directive @isAuthenticated on FIELD_DEFINITION